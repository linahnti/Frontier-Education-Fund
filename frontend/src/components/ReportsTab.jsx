import React, { useState, useEffect } from "react";
import { Button, Table } from "react-bootstrap";
import { jsPDF } from "jspdf";
import "../styles/ReportsTab.css";

const ReportsTab = ({ userId, role }) => {
  const [data, setData] = useState([]);
  const [requests, setRequests] = useState([]);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const token = localStorage.getItem("token");
        const endpoint =
          role === "Donor"
            ? `http://localhost:5000/api/donors/${userId}/reports`
            : `http://localhost:5000/api/schools/${userId}/reports`;

        const response = await fetch(endpoint, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch reports");
        }

        const result = await response.json();
        setData(result.donations || []);
      } catch (error) {
        console.error("Error fetching reports:", error);
      }
    };

    const fetchDonationRequests = async () => {
      if (role === "School") {
        try {
          const token = localStorage.getItem("token");
          const response = await fetch(
            `http://localhost:5000/api/schools/${userId}/donation-requests`,
            {
              method: "GET",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );

          if (!response.ok) {
            throw new Error("Failed to fetch donation requests");
          }

          const result = await response.json();
          setRequests(Array.isArray(result) ? result : []);
        } catch (error) {
          console.error("Error fetching donation requests:", error);
        }
      }
    };

    fetchReports();
    fetchDonationRequests();
  }, [userId, role]);

  const filterDataByStatus = (status) => {
    return data.filter((item) => item.status === status);
  };

  const downloadPDF = (status) => {
    const filteredData = filterDataByStatus(status);
    const doc = new jsPDF();

    // Get user's name from localStorage or use default
    const userName = localStorage.getItem("userName") || "User";

    // Report title
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40);
    doc.text(`${role} ${status} Donation Report`, 105, 20, { align: "center" });

    // Report metadata
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by: ${userName}`, 14, 30);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 36);

    // Add a line separator
    doc.setDrawColor(200, 200, 200);
    doc.line(14, 42, 196, 42);

    // Table headers
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, "bold");

    const headers =
      role === "Donor"
        ? ["School Name", "Type", "Amount/Items", "Status", "Date"]
        : ["Donor Name", "Item", "Status", "Date"];

    const columnPositions =
      role === "Donor" ? [14, 60, 90, 140, 170] : [14, 70, 120, 160];

    // Draw table header
    let yPos = 50;
    headers.forEach((header, i) => {
      doc.text(header, columnPositions[i], yPos);
    });

    // Draw header underline
    doc.line(14, yPos + 5, role === "Donor" ? 186 : 176, yPos + 5);
    yPos += 10;

    // Table rows
    doc.setFont(undefined, "normal");
    doc.setFontSize(10);

    filteredData.forEach((item, index) => {
      if (yPos > 270) {
        // Add new page if needed
        doc.addPage();
        yPos = 20;
        // Repeat header on new page
        doc.setFont(undefined, "bold");
        headers.forEach((header, i) => {
          doc.text(header, columnPositions[i], yPos);
        });
        yPos += 10;
        doc.setFont(undefined, "normal");
      }

      // Alternate row colors
      if (index % 2 === 0) {
        doc.setFillColor(245, 245, 245);
        doc.rect(14, yPos - 5, role === "Donor" ? 172 : 162, 10, "F");
      }

      if (role === "Donor") {
        doc.text(item.schoolName || "N/A", 14, yPos);
        doc.text(item.type || "N/A", 60, yPos);
        doc.text(
          item.type === "money"
            ? `KES ${item.amount || 0}`
            : item.items?.join(", ") || "N/A",
          90,
          yPos
        );
        doc.text(item.status, 140, yPos);
        doc.text(new Date(item.date).toLocaleDateString(), 170, yPos);
      } else {
        doc.text(item.donorName || "N/A", 14, yPos);
        doc.text(item.item || "N/A", 70, yPos);
        doc.text(item.status, 120, yPos);
        doc.text(new Date(item.date).toLocaleDateString(), 160, yPos);
      }

      yPos += 10;
    });

    // Footer with mission statement and copyright
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);

    // Mission statement (split into multiple lines if needed)
    const missionText =
      "To ensure quality education for every child by bridging the gap between donors and underprivileged schools, by providing a transparent platform that fosters impactful change fostering a brighter future.";

    // Calculate text width and split if needed
    const maxWidth = 180;
    const splitMission = doc.splitTextToSize(missionText, maxWidth);

    // Position mission statement
    let missionY = 280;
    splitMission.forEach((line) => {
      doc.text(line, 105, missionY, { align: "center" });
      missionY += 5;
    });

    // Copyright notice
    doc.setFont(undefined, "italic");
    doc.text("Â© 2025 Frontier Education Fund", 105, missionY + 5, {
      align: "center",
    });

    // Save the PDF with timestamp
    doc.save(`${role}_${status}_Donation_Report_${Date.now()}.pdf`);
  };

  const renderTable = (status) => {
    const filteredData = filterDataByStatus(status);

    return (
      <div className="mt-4">
        <h4>{status} Donations</h4>
        <Table striped bordered hover>
          <thead>
            <tr>
              {role === "Donor" ? (
                <>
                  <th>School Name</th>
                  <th>Type</th>
                  <th>Amount/Items</th>
                  <th>Status</th>
                  <th>Date</th>
                </>
              ) : (
                <>
                  <th>Donor Name</th>
                  <th>Item</th>
                  <th>Status</th>
                  <th>Date</th>
                </>
              )}
            </tr>
          </thead>
          <tbody>
            {filteredData.map((item, index) => (
              <tr key={index}>
                {role === "Donor" ? (
                  <>
                    <td>{item.schoolName || "N/A"}</td>
                    <td>{item.type}</td>
                    <td>
                      {item.type === "money"
                        ? `KES ${item.amount || 0}`
                        : item.items?.join(", ") || "N/A"}
                    </td>
                    <td>{item.status}</td>
                    <td>{new Date(item.date).toLocaleDateString()}</td>
                  </>
                ) : (
                  <>
                    <td>{item.donorName || "N/A"}</td>
                    <td>{item.item || "N/A"}</td>
                    <td>{item.status}</td>
                    <td>{new Date(item.date).toLocaleDateString()}</td>
                  </>
                )}
              </tr>
            ))}
          </tbody>
        </Table>
        <Button variant="primary" onClick={() => downloadPDF(status)}>
          <i className="bi bi-download"></i> Download Report
        </Button>
      </div>
    );
  };

  const renderDonationRequests = () => {
    const statuses = ["Pending", "Approved", "Completed", "Rejected"];

    return (
      <div className="mt-4">
        <h4>Donation Requests</h4>
        {statuses.map((status) => (
          <div key={status}>
            <h5>{status} Requests</h5>
            <Table striped bordered hover>
              <thead>
                <tr>
                  <th>Needs</th>
                  <th>Status</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                {requests
                  .filter((request) => request.status === status)
                  .map((request, index) => (
                    <tr key={index}>
                      <td>{request.donationNeeds?.join(", ") || "N/A"}</td>
                      <td>{request.status}</td>
                      <td>{new Date(request.date).toLocaleDateString()}</td>
                    </tr>
                  ))}
              </tbody>
            </Table>
            <Button variant="primary" onClick={() => downloadPDF(status)}>
              <i className="bi bi-download"></i> Download Report
            </Button>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div>
      {role === "Donor" ? (
        <>
          {renderTable("Pending")}
          {renderTable("Approved")}
          {renderTable("Completed")}
        </>
      ) : (
        <>
          {renderTable("Pending")}
          {renderTable("Approved")}
          {renderTable("Received")}
          {renderDonationRequests()}
        </>
      )}
    </div>
  );
};

export default ReportsTab;
